{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The <code>Report</code> object from citation-report is only one part of a Philippine Supreme Court <code>Citation</code>.</p> <p>It's possible for a <code>Citation</code> object to:</p> <ol> <li>have both a <code>Docket</code> and a <code>Report</code>,</li> <li>have just a <code>Docket</code>;</li> <li>have just a <code>Report</code>.</li> </ol> <p>This library will handle the patterns involved with respect to the <code>Docket</code>.</p> <p>Both citation-reports and citation-docket are dependencies of citation-utils.</p> <p>Like citation-reports, there is a problem involving inconsistent use of values. We address it the same way by dissecting the component parts and generating a uniform citation:</p>"},{"location":"#citation_docket.__main__.extract_docket_from_data","title":"<code>extract_docket_from_data(data)</code>","text":"<p>Return a DocketReportCitationType based on the contents of a <code>data</code> dict.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; data = {\n    \"date_prom\": \"1985-04-24\",\n    \"docket\": \"General Register L-63915, April 24, 1985\",\n    \"orig_idx\": \"GR No. L-63915\",\n    \"phil\": \"220 Phil. 422\",\n    \"scra\": \"136 SCRA 27\",\n    \"offg\": None,\n} # assume transformation from /details.yaml file\n&gt;&gt;&gt; extract_citation_from_data(data)\n'CitationGeneralRegister(publisher=None, volume=None, page=None, volpubpage=None, report_date=None, context='G.R. No. L-63915', short_category='GR', category='General Register', ids='L-63915', docket_date=datetime.date(1985, 4, 24))'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Should contain relevant keys.</p> required <p>Returns:</p> Name Type Description <code>DocketReportCitationType</code> <code>DocketReportCitationType | None</code> <p>description</p>"},{"location":"#citation_docket.__main__.extract_dockets","title":"<code>extract_dockets(raw)</code>","text":"<p>Extract from <code>raw</code> text all raw citations which should include their Docket and Report component parts.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; text = \"Bagong Alyansang Makabayan v. Zamora, G.R. Nos. 138570, 138572, 138587, 138680, 138698, October 10, 2000, 342 SCRA 449\"\n&gt;&gt;&gt; docket = next(extract_dockets(text))\nCitationGeneralRegister(publisher='SCRA', volume='342', page='449', volpubpage='342 SCRA 449', report_date=None, context='G.R. Nos. 138570, 138572, 138587, 138680, 138698', short_category='GR', category='General Register', ids='138570, 138572, 138587, 138680, 138698', docket_date=datetime.date(2000, 10, 10))\n&gt;&gt;&gt; str(docket)\n'GR 138570, Oct. 10, 2000'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>raw</code> <code>str</code> <p>Text to look for dockets and reports</p> required <p>Yields:</p> Type Description <code>Iterator[DocketReportCitationType]</code> <p>Iterator[DocketReportCitationType]: Any of custom Docket with Report types, e.g. <code>CitationAdministrativeCase</code>, etc.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#docket-report-citation","title":"Docket Report Citation","text":"<p>Let's look at sample citation that is typically found in the body and the footnotes section of a decision:</p> <p>Bagong Alyansang Makabayan v. Zamora, G.R. Nos. 138570, 138572, 138587, 138680, 138698, October 10, 2000, 342 SCRA 449</p> <p>We can separate the <code>Docket</code> portion from the <code>Report</code> portion:</p> Docket Report G.R. Nos. 138570, 138572, 138587, 138680, 138698, October 10, 2000 342 SCRA 449 <p>For lack of a better term, we'll call the combination of a <code>Docket</code> and a <code>Report</code> a <code>DocketReportCitation</code>. It is implemented by:</p>"},{"location":"reference/#citation_docket.regexes.models.docket_citation.DocketReportCitation","title":"<code>DocketReportCitation</code>","text":"<p>         Bases: <code>Docket</code>, <code>Report</code>, <code>abc.ABC</code></p> <p>Note <code>Report</code> is defined in a separate library <code>citation-report</code>.</p>"},{"location":"reference/#docket-models","title":"Docket Models","text":""},{"location":"reference/#citation_docket.regexes.models.docket_model.Docket","title":"<code>Docket</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The Docket is the modern identifier of a Supreme Court decision. It is based on a category, a serial id, and a date.</p> Sample Citation Category Serial Date G.R. Nos. 138570, October 10, 2000 GR 74910 October 10, 2000 A.M. RTJ-12-2317 (Formerly OCA I.P.I. No. 10-3378-RTJ), Jan 1, 2000 AM RTJ-12-2317 Jan 1, 2000 A.C. No. 10179 (Formerly CBD 11-2985), March 04, 2014 AC 10179 Mar. 4, 2014 <p>It is often paired with a Report, which is the traditional identifier based on volume and page numbers.</p>"},{"location":"reference/#citation_docket.regexes.models.docket_model.Docket.first_id","title":"<code>first_id</code>  <code>property</code>","text":"<p>Get the first element from a list of separators when possible.</p>"},{"location":"reference/#citation_docket.regexes.models.docket_model.Docket.serial_text","title":"<code>serial_text: str</code>  <code>property</code>","text":"<p>From the raw <code>ids</code>, get the <code>cleaned_ids</code>, and of these <code>cleaned_ids</code>,     extract the <code>@first_id</code> found to deal with compound ids, e.g.     ids separated by 'and' and ','</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Singular text identifier</p>"},{"location":"reference/#docket-categories","title":"Docket Categories","text":""},{"location":"reference/#citation_docket.regexes.models.docket_category.DocketCategory","title":"<code>DocketCategory</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>There are four common docket references involving Philippine Supreme Court decisions.</p> Name Value <code>GR</code> General Register <code>AM</code> Administrative Matter <code>AC</code> Administrative Case <code>BM</code> Bar Matter <p>Complication: These categories do not always represent decisions. For instance, there are are <code>AM</code> and <code>BM</code> docket numbers that represent rules rather than decisions.</p>"},{"location":"reference/#citation_docket.regexes.models.docket_category.ShortDocketCategory","title":"<code>ShortDocketCategory</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> <p>For purposes of creating an enumeration for use in Pydantic.</p>"},{"location":"reference/#docket-construction","title":"Docket Construction","text":"<p>Although the docket models share a similar configuration, the regex strings involved are different for each, prompting the need for a preparatory constructor class:</p>"},{"location":"reference/#citation_docket.regexes.models.constructor.Constructor","title":"<code>Constructor</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Prefatorily, regex strings are defined so that a <code>re.Match</code> object can take advantage of the \"group_name\" assigned in the string.</p> <p>These are the docket styles with regex strings predefined:</p> <ol> <li>General Register</li> <li>Administrative Matter</li> <li>Administrative Case</li> <li>Bar Matter</li> </ol> <p>The Constructor formalizes the assigned group names into their respective fields.</p> <p>Relatedly, it takes advantage of the <code>citation_date</code> and the <code>citation_report</code> libraries in generating the main @pattern since the regex strings above are only concerned with the <code>key</code> <code>num</code> <code>id</code> formula part of the docket, e.g. <code>GR</code> <code>No.</code> <code>123</code></p>"},{"location":"reference/#citation_docket.regexes.models.constructor.Constructor.key_num_pattern","title":"<code>key_num_pattern: re.Pattern</code>  <code>property</code>","text":"<p>Unlike the full @pattern, this regex compiled object is limited to just the key and number elements, e.g. \"GR No. 123\" or \"BP Blg. 45\"</p>"},{"location":"reference/#citation_docket.regexes.models.constructor.Constructor.pattern","title":"<code>pattern: re.Pattern</code>  <code>property</code>","text":"<p>Construct the regex string and generate a full Pattern object from:</p> <ol> <li><code>docket_regex</code>,</li> <li><code>docket_date</code> defined in the citation-date library</li> <li>an optional <code>REPORT_REGEX</code> defined in the citation-report library</li> </ol> <p>Returns:</p> Name Type Description <code>Pattern</code> <code>re.Pattern</code> <p>Combination of Docket and Report styles.</p>"},{"location":"reference/#citation_docket.regexes.models.constructor.Constructor.detect","title":"<code>detect(raw)</code>","text":"<p>Logic: if the <code>self.init_name</code> Match group exists, get the entire regex expression represented by <code>self.group_name</code>, then extract subgroups which will consist of Docket and Report parts.</p> <p>Parameters:</p> Name Type Description Default <code>raw</code> <code>str</code> <p>description</p> required <p>Yields:</p> Type Description <code>Iterator[dict[str, Any]]</code> <p>Iterator[dict[str, Any]]: A dict that can fill up a Docket + Report pydantic BaseModel</p>"},{"location":"reference/#gr","title":"GR","text":""},{"location":"reference/#citation_docket.regexes.constructed_gr.CitationGeneralRegister","title":"<code>CitationGeneralRegister</code>","text":"<p>         Bases: <code>DocketReportCitation</code></p>"},{"location":"reference/#citation_docket.regexes.constructed_gr.CitationGeneralRegister.search","title":"<code>search(text)</code>  <code>classmethod</code>","text":"<p>Get all dockets matching the <code>GR</code> docket pattern, inclusive of their optional Report object.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; text = \"Bagong Alyansang Makabayan v. Zamora, G.R. Nos. 138570, 138572, 138587, 138680, 138698, October 10, 2000, 342 SCRA 449\"\n&gt;&gt;&gt; next(CitationGeneralRegister.search(text))\nCitationGeneralRegister(publisher='SCRA', volume='342', page='449', volpubpage='342 SCRA 449', report_date=None, context='G.R. Nos. 138570, 138572, 138587, 138680, 138698', short_category='GR', category='General Register', ids='138570, 138572, 138587, 138680, 138698', docket_date=datetime.date(2000, 10, 10))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to look for citation objects</p> required <p>Yields:</p> Type Description <code>Iterator[Self]</code> <p>Iterator[Self]: Combination of Docket and Report pydantic model.</p>"},{"location":"reference/#nuanced-general-register-id-matching","title":"Nuanced General Register ID Matching","text":"<p>Note: What is the value of adding <code>L-</code> to a General Register docket? It seems like L stands for \"Legacy\" although I can't seem to find official references to its designation.</p> <p></p>"},{"location":"reference/#citation_docket.regexes.models.gr_clean.gr_prefix_clean","title":"<code>gr_prefix_clean(text)</code>","text":"<p>The GR (General Register) docket ID makes use of <code>L-xxx</code> as a prefix in some of its serialized ids.</p> <p>Since most legal documents are parsed via OCR, the translation is often errneous resulting in an L-<code>I</code>9863 instead of being L-<code>1</code>9863.</p> <p>This also deals with cases involving inconsistent formatting, e.g. <code>No. L-12414</code>.</p> <p>If the regex patterns find the inconsistencies described above, clean the prefix.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; inconsistent_text = \"No. L-I9863\"\n&gt;&gt;&gt; gr_prefix_clean(inconsistent_text)\n'L-19863'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Raw docket serial ID that ought to be cleaned, e.g. <code>`L-I</code> or <code>No. L-</code>.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: The cleaned GR docket ID, if detected.</p>"},{"location":"reference/#citation_docket.regexes.models.gr_clean.remove_prefix_regex","title":"<code>remove_prefix_regex(regex_to_match, text)</code>","text":"<p>Based on the <code>regex</code> passed, remove this from the start of the <code>text</code></p>"},{"location":"reference/#citation_docket.regexes.models.gr_clean.replace_prefix_regex","title":"<code>replace_prefix_regex(regex_to_match, text, std)</code>","text":"<p>Based on the <code>regex</code> passed, replace this from the start of the <code>text</code> with a standardized variant <code>std</code>.</p>"},{"location":"reference/#am","title":"AM","text":""},{"location":"reference/#citation_docket.regexes.constructed_am.CitationAdministrativeMatter","title":"<code>CitationAdministrativeMatter</code>","text":"<p>         Bases: <code>DocketReportCitation</code></p>"},{"location":"reference/#citation_docket.regexes.constructed_am.CitationAdministrativeMatter.search","title":"<code>search(text)</code>  <code>classmethod</code>","text":"<p>Get all dockets matching the <code>AM</code> docket pattern, inclusive of their optional Report object.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; text = \"A.M. No. P-88-198, February 25, 1992, 206 SCRA 491.\"\n&gt;&gt;&gt; next(CitationAdministrativeMatter.search(text))\nCitationAdministrativeMatter(publisher='SCRA', volume='206', page='491', volpubpage='206 SCRA 491', report_date=None, context='A.M. No. P-88-198', short_category='AM', category='Administrative Matter', ids='P-88-198', docket_date=datetime.date(1992, 2, 25))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to look for citation objects</p> required <p>Yields:</p> Type Description <code>Iterator[Self]</code> <p>Iterator[Self]: Combination of Docket and Report pydantic model.</p>"},{"location":"reference/#ac","title":"AC","text":""},{"location":"reference/#citation_docket.regexes.constructed_ac.CitationAdministrativeCase","title":"<code>CitationAdministrativeCase</code>","text":"<p>         Bases: <code>DocketReportCitation</code></p>"},{"location":"reference/#citation_docket.regexes.constructed_ac.CitationAdministrativeCase.search","title":"<code>search(text)</code>  <code>classmethod</code>","text":"<p>Get all dockets matching the <code>AC</code> docket pattern, inclusive of their optional Report object.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; text = \"A.C. No. P-88-198, February 25, 1992, 206 SCRA 491.\"\n&gt;&gt;&gt; next(CitationAdministrativeCase.search(text))\nCitationAdministrativeCase(publisher='SCRA', volume='206', page='491', volpubpage='206 SCRA 491', report_date=None, context='A.C. No. P-88-198', short_category='AC', category='Administrative Case', ids='P-88-198', docket_date=datetime.date(1992, 2, 25))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to look for citation objects</p> required <p>Yields:</p> Type Description <code>Iterator[Self]</code> <p>Iterator[Self]: Combination of Docket and Report pydantic model.</p>"},{"location":"reference/#bm","title":"BM","text":""},{"location":"reference/#citation_docket.regexes.constructed_bm.CitationBarMatter","title":"<code>CitationBarMatter</code>","text":"<p>         Bases: <code>DocketReportCitation</code></p>"},{"location":"reference/#citation_docket.regexes.constructed_bm.CitationBarMatter.search","title":"<code>search(text)</code>  <code>classmethod</code>","text":"<p>Get all dockets matching the <code>GR</code> docket pattern, inclusive of their optional Report object.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; text = \"B.M. No. 1678, December 17, 2007\"\n&gt;&gt;&gt; next(CitationBarMatter.search(text))\nCitationBarMatter(publisher=None, volume=None, page=None, volpubpage=None, report_date=None, context='B.M. No. 1678', short_category='BM', category='Bar Matter', ids='1678', docket_date=datetime.date(2007, 12, 17))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to look for citation objects</p> required <p>Yields:</p> Type Description <code>Iterator[Self]</code> <p>Iterator[Self]: Combination of Docket and Report pydantic model.</p>"}]}